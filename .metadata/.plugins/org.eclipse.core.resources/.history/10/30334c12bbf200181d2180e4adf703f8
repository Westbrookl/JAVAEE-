package com.jhc.运行时获取泛型的真是类型;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Map;

abstract class GenericType<T>{
	
}
public class TestGenericType extends GenericType<String> {
	private Map<String,Integer> map;
	
	public Map<String,Integer> getMap(){
		return map;
	}
	public void setMap(Map<String,Integer> map1){
		this.map = map1;
	}
	public static void main(String[] args) throws NoSuchFieldException, SecurityException,NoSuchMethodException{
		Class<TestGenericType> tClass =  TestGenericType.class;
		Type type = tClass.getGenericSuperclass();//得到继承类的类型
		if(type instanceof ParameterizedType){//判断父类是否是参数泛型的内容
			Type[] types =((ParameterizedType)type).getActualTypeArguments();//得到实际的类型
			for(Type t:types){
				System.out.println("types:+" +t);
			}
		}
		
		Field f1 = tClass.getDeclaredField("map");
		Type typeField = f1.getGenericType();
		if(typeField instanceof ParameterizedType){
			Type[] typesField = ((ParameterizedType)typeField).getActualTypeArguments();
			for(Type t1:typesField){
				System.out.println(t1);
			}
		}

		
	}
}
